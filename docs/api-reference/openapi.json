{
  "openapi": "3.1.1",
  "info": {
    "title": "SJAA Database",
    "description": "An API for securely accessing member and club information.",
    "license": {
      "name": "MIT"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://membership.sjaa.net/api"
    }
  ],
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "paths": {
    "/keys": {
      "post": {
        "description": "Creates a new api key (bearer token) for the user given by Basic auth.",
        "security": [
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Bearer token api key.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiKey"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      },
      "get": {
        "description": "Returns all the API Keys currently assigned to the account.",
        "responses": {
          "200": {
            "description": "API Keys response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiKey"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      },
      "delete": {
        "description": "Revoke an API Key (Bearer token).  The token to revoke is the same one used to authenticate this request.",
        "responses": {
          "200": {
            "description": "Revocation successful."
          }
        }
      }
    },
    "/people": {
      "get": {
        "description": "Returns all people matching the requested query.  Does not include Admins.  Requires read permissions.",
        "requestBody":{
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PersonFilter"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Array of people.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Person"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/people/:id": {
      "patch": {
        "description": "Update the person with the indicated :id in the URL.  Requires write permissions.",
        "requestBody":{
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PersonForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The updated Person record.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Person"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    }
  },
  "components": {
    "responses": {
      "Unauthorized": {
        "description": "Request failed to authenticate or contained insufficient permissions for the operation.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      }
    },
    "schemas": {
      "PersonForm": {
        "type": "object",
        "properties": {
          "person[first_name]": {
            "description": "Update first name.",
            "type": "string"
          },
          "person[last_name]": {
            "description": "Update last name.",
            "type": "string"
          },
          "person[discord_id]": {
            "description": "Update Discord user ID.",
            "type": "string"
          }
        }
      },
      "Person": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Internal database identifier.  Use where :id is required.",
            "type": "array"
          },
          "contacts": {
            "description": "List of contacts, including address, phone, and email.",
            "type": "array"
          },
          "memberships": {
            "description": "List of memberships, which include start and end dates.",
            "type": "array"
          },
          "first_name": {
            "description": "first name.",
            "type": "string"
          },
          "last_name": {
            "description": "last name.",
            "type": "string"
          },
          "discord_id": {
            "description": "Discord user ID.",
            "type": "string"
          }
        }
      },
      "PersonFilter": {
        "type": "object",
        "properties": {
          "email": {
            "description": "Filter by given email address.",
            "type": "string"
          },
          "first_name": {
            "description": "Filter by given first name.",
            "type": "string"
          },
          "last_name": {
            "description": "Filter by given last name.",
            "type": "string"
          },
          "active": {
            "type": "string",
            "anyOf": [
              {
                "const": "yes",
                "title": "Active",
                "description": "People with a current membership."
              },
              {
                "const": "no",
                "title": "Inactive",
                "description": "People without a current membership."
              }
            ]
          },
          "discord_id": {
            "description": "Filter by given Discord user ID.",
            "type": "string"
          }
        }
      },
      "Permissions": {
        "type": "string",
        "anyOf": [
          {
            "const": "read",
            "title": "Read",
            "description": "Allows reading of any data, except permissions."
          },
          {
            "const": "write",
            "title": "Write",
            "description": "Allows writing of any data, excpet permissions."
          },
          {
            "const": "permit",
            "title": "Permit",
            "description": "Allows reading and writing of permissions for other Admin accounts."
          }
        ]
      },
      "ApiKey": {
        "type": "object",
        "properties": {
          "token": {
            "description": "The Bearer token that can be used to access other API endpoints.",
            "type": "string"
          },
          "permissions": {
            "description": "A list of permissions that your api-key is granted.  Any of these [Permissions](/api-reference/data-types/permissions).",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Permissions"
            }
          }
        }
      },
      "Error": {
        "required": [
          "errors"
        ],
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      },
      "basicAuth": {
        "type": "http",
        "scheme": "basic"
      }
    }
  }
}